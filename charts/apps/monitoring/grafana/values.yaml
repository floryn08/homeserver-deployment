namespace: &namespace monitoring
grafanaDataPath: <path:kv/data/hostPath#appdata>/monitoring/grafana
grafana:
  namespaceOverride: *namespace
  assertNoLeakedSecrets: false

  service:
    type: LoadBalancer
    port: 8100

  datasources: 
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus-server.monitoring.svc
        access: proxy
        isDefault: true

  grafana.ini:
    server:
      domain: <path:kv/data/monitoring/grafana#url>
      root_url: http://<path:kv/data/monitoring/grafana#url>
    auth:
        signout_redirect_url: "https://auth.<path:kv/data/domains#primaryDomain>/application/o/grafana/end-session/"
        oauth_auto_login: false
    auth.generic_oauth:
        name: authentik
        enabled: true
        client_id: "<path:kv/data/monitoring/grafana#clientId>"
        client_secret: "<path:kv/data/monitoring/grafana#clientSecret>"
        scopes: "openid profile email"
        auth_url: "https://auth.<path:kv/data/domains#primaryDomain>/application/o/authorize/"
        token_url: "https://auth.<path:kv/data/domains#primaryDomain>/application/o/token/"
        api_url: "https://auth.<path:kv/data/domains#primaryDomain>/application/o/userinfo/"
        role_attribute_path: contains(groups, 'Grafana Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'

  persistence:
    enabled: true
    storageClassName: manual

  admin:
    existingSecret: grafana
    userKey: admin-user
    passwordKey: admin-password

# https://github.com/grafana/loki/blob/main/production/helm/loki/values.yaml
loki:
  deploymentMode: SingleBinary
  loki:
    auth_enabled: false
    commonConfig:
      replication_factor: 1 
    schemaConfig:
      configs:
        - from: 2025-02-16
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: index_
            period: 24h
    storage:
      type: filesystem
  singleBinary:
    replicas: 1 
  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0

  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

alloy:
  configReloader:
    enabled: false
  alloy:
    configMap:
      create: true
      content: |
        loki.write "grafana_loki" {
          endpoint {
          url = "http://grafana-loki-gateway.monitoring.svc/loki/api/v1/push"
          }
        }

        local.file_match "node_logs" {
          path_targets = [{
              // Monitor syslog to scrape node-logs
              __path__  = "/var/log/syslog",
              job       = "node/syslog",
              node_name = sys.env("HOSTNAME"),
              cluster   = cluster,
          }]
        }

        loki.source.file "node_logs" {
          targets    = local.file_match.node_logs.targets
          forward_to = [loki.write.grafana_loki.receiver]
        }

        discovery.kubernetes "pod" {
          role = "pod"
        }

        // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
        // If no rules are defined, then the input targets are exported as-is.
        discovery.relabel "pod_logs" {
          targets = discovery.kubernetes.pod.targets

          // Label creation - "namespace" field from "__meta_kubernetes_namespace"
          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            action = "replace"
            target_label = "namespace"
          }

          // Label creation - "pod" field from "__meta_kubernetes_pod_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            action = "replace"
            target_label = "pod"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "container"
          }

          // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
          rule {
            source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
            action = "replace"
            target_label = "app"
          }

          // Label creation -  "job" field from "__meta_kubernetes_namespace" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_namespace/__meta_kubernetes_pod_container_name
          rule {
            source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "job"
            separator = "/"
            replacement = "$1"
          }

          // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
          // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
          rule {
            source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
            action = "replace"
            target_label = "__path__"
            separator = "/"
            replacement = "/var/log/pods/*$1/*.log"
          }

          // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
          rule {
            source_labels = ["__meta_kubernetes_pod_container_id"]
            action = "replace"
            target_label = "container_runtime"
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
          }
        }

        // loki.source.kubernetes tails logs from Kubernetes containers using the Kubernetes API.
        loki.source.kubernetes "pod_logs" {
          targets    = discovery.relabel.pod_logs.output
          forward_to = [loki.process.pod_logs.receiver]
        }

        // loki.process receives log entries from other Loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "pod_logs" {
          stage.static_labels {
              values = {
                cluster = "cluster",
              }
          }

          forward_to = [loki.write.grafana_loki.receiver]
        }

        // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
        // into log lines to forward to other Loki components.
        loki.source.kubernetes_events "cluster_events" {
          job_name   = "integrations/kubernetes/eventhandler"
          log_format = "logfmt"
          forward_to = [
            loki.process.cluster_events.receiver,
          ]
        }

        // loki.process receives log entries from other loki components, applies one or more processing stages,
        // and forwards the results to the list of receivers in the component's arguments.
        loki.process "cluster_events" {
          forward_to = [loki.write.grafana_loki.receiver]

          stage.static_labels {
            values = {
              cluster = "cluster",
            }
          }

          stage.labels {
            values = {
              kubernetes_cluster_events = "job",
            }
          }
        }